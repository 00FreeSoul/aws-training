{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Infrastructure for AWS workshop demo application",

  "Parameters": {
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.micro", "t2.small", "t2.medium"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "UIPort": {
      "Description": "The TCP port for the UI Server",
      "Type": "Number",
      "Default": "9001"
    },
    "LoaderPort": {
      "Description": "The TCP port for the Loader Server",
      "Type": "Number",
      "Default": "9002"
    },
    "AmiId": {
      "Description": "AMI ID to be used with all the instances",
      "Type": "String"
    },
    "UserEmail": {
      "Description": "Email address to notify if there are any scaling operations",
      "Type": "String"
    },
    "UserName": {
      "Description": "Username to identify resources created by different users",
      "Type": "String"
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "String"
    },
    "IPRange": {
      "Description": "The IP address range that can be used to access the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
   }
  },

  "Resources": {

    "UIAutoScalingNotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
            "Endpoint": { "Ref": "UserEmail" },
            "Protocol": "email" }]
      }
    },
    "UIAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": ""},
        "LaunchConfigurationName": { "Ref": "UILaunchConfig" },
        "MinSize": "2",
        "MaxSize": "4",
        "LoadBalancerNames": [ { "Ref": "UIElasticLoadBalancer" } ],
        "Tags": [{ "Key": "Name", "Value": { "Fn::Join": ["-", ["aws-workshop", { "Ref": "UserName" },"ui"]]}, "PropagateAtLaunch": true }],
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "UIAutoScalingNotificationTopic" },
          "NotificationTypes": [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                 "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                 "autoscaling:EC2_INSTANCE_TERMINATE",
                                 "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }
      }
    },
    "UILaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": { "Ref": "AmiId" },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash\n",
          "pip install awscli\n",
          "cd /tmp/\n",
          "aws s3 cp --region eu-west-1 s3://aws-workshop-demo/tools/bootstrap/deploy_app.yml deploy_app.yml\n",
          "aws s3 cp --region eu-west-1 s3://aws-workshop-demo/tools/bootstrap/upstart_service.conf upstart_service.conf\n",
          "ansible-playbook -i localhost, -e \"user_name=",{ "Ref": "UserName" }," app_name=aws-workshop-ui\" deploy_app.yml\n"
          ]]}},
        "SecurityGroups": [ { "Ref": "UISecurityGroup" } ],
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": "aws-workshop-ui-role"
      }
    },
    "UIScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "UIAutoScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "UIScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "UIAutoScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment" : "-1"
      }
    },
    "UICPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "UIScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "UIAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "UICPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "UIScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "UIAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "UIElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": { "Fn::Join": ["", ["aws-workshop-", { "Ref": "UserName" }]]},
        "AvailabilityZones": { "Fn::GetAZs" : "" },
        "Listeners": [ {
          "LoadBalancerPort": "80",
          "InstancePort": { "Ref": "UIPort" },
          "Protocol": "HTTP"
        } ],
        "HealthCheck": {
          "Target": { "Fn::Join": [ "", ["HTTP:", { "Ref": "UIPort" }, "/"]]},
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "3",
          "Interval": "10",
          "Timeout": "5"
        }
      }
    },
    "UISecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP from specified address range",
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": { "Ref": "IPRange"}
        },
        {
          "IpProtocol": "tcp",
          "FromPort": { "Ref" : "UIPort" },
          "ToPort": { "Ref" : "UIPort" },
          "SourceSecurityGroupName": {"Fn::GetAtt": ["UIElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
        } ]
      }
    },


    "LoaderInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": { "Ref": "AmiId" },
        "Tags": [{ "Key": "Name", "Value": { "Fn::Join": ["-", ["aws-workshop", { "Ref": "UserName" }, "loader"]]}}],
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [ { "Ref": "LoaderSecurityGroup" } ],
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": "aws-workshop-loader-role",
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash\n",
          "pip install awscli\n",
          "cd /tmp/\n",
          "aws s3 cp --region eu-west-1 s3://aws-workshop-demo/tools/bootstrap/deploy_app.yml deploy_app.yml\n",
          "aws s3 cp --region eu-west-1 s3://aws-workshop-demo/tools/bootstrap/upstart_service.conf upstart_service.conf\n",
          "ansible-playbook -i localhost, -e \"user_name=",{ "Ref": "UserName" }," app_name=aws-workshop-loader\" deploy_app.yml\n"
          ]]}}
      }
    },
    "LoaderSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP from specified address range",
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": { "Ref": "IPRange"}
        },
        {
          "IpProtocol": "tcp",
          "FromPort": { "Ref" : "LoaderPort" },
          "ToPort": { "Ref" : "LoaderPort" },
          "CidrIp": { "Ref": "IPRange"}
        } ]
      }
    },


    "FetcherAutoScalingNotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
            "Endpoint": { "Ref": "UserEmail" },
            "Protocol": "email" }]
      }
    },
    "FetcherAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": ""},
        "LaunchConfigurationName": { "Ref": "FetcherLaunchConfig" },
        "MinSize": "2",
        "MaxSize": "4",
        "Tags": [{ "Key": "Name", "Value": { "Fn::Join": ["-", ["aws-workshop", { "Ref": "UserName" },"fetcher"]]}, "PropagateAtLaunch": true }],
        "NotificationConfiguration": {
          "TopicARN": { "Ref": "FetcherAutoScalingNotificationTopic" },
          "NotificationTypes": [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                 "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                 "autoscaling:EC2_INSTANCE_TERMINATE",
                                 "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }
      }
    },
    "FetcherLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": { "Ref": "AmiId" },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash\n",
          "pip install awscli\n",
          "cd /tmp/\n",
          "aws s3 cp --region eu-west-1 s3://aws-workshop-demo/tools/bootstrap/deploy_app.yml deploy_app.yml\n",
          "aws s3 cp --region eu-west-1 s3://aws-workshop-demo/tools/bootstrap/upstart_service.conf upstart_service.conf\n",
          "ansible-playbook -i localhost, -e \"user_name=",{ "Ref": "UserName" }," app_name=aws-workshop-fetcher\" deploy_app.yml\n"
          ]]}},
        "SecurityGroups": [ { "Ref": "FetcherSecurityGroup" } ],
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": "aws-workshop-fetcher-role"
      }
    },
    "FetcherScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "FetcherAutoScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "FetcherScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "FetcherAutoScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment" : "-1"
      }
    },
    "FetcherCPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "FetcherScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "FetcherAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "FetcherCPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "FetcherScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "FetcherAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "FetcherSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access from specified address range",
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": { "Ref": "IPRange"}
        } ]
      }
    },


    "QueueQueries": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": { "Fn::Join": ["-", ["aws-workshop", { "Ref": "UserName" }, "queries"]]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "MessageRetentionPeriod": 28800
      }
    },


    "QueueUrls": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": { "Fn::Join": ["-", ["aws-workshop", { "Ref": "UserName" }, "urls"]]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "MessageRetentionPeriod": 28800
      }
    },
    "QueueUrlsAlarmTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": { "Ref": "UserEmail" },
          "Protocol": "email"
        }]
      }
    },
    "QueueUrlsDepthAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if queue depth grows beyond 10 messages",
        "Namespace": "AWS/SQS",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Dimensions": [{
          "Name": "QueueName",
          "Value": { "Fn::GetAtt": ["QueueUrls", "QueueName"] }
        }],
        "Statistic": "Sum",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "10",
        "ComparisonOperator": "GreaterThanThreshold",
        "AlarmActions": [{ "Ref": "QueueUrlsAlarmTopic" }],
        "InsufficientDataActions": [{ "Ref": "QueueUrlsAlarmTopic" }]
      }
    },

    "Images": {
      "Type": "AWS::SDB::Domain"
    }

  },


  "Outputs": {
    "URL": {
      "Description": "The URL of the website",
      "Value":  { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "UIElasticLoadBalancer", "DNSName" ]}]]}
    }
  }
}
